const input = '><<<<>><<><<<<>>>><<><<<>>><<>>>><<<<>>><<<><<<<>>><<<><<<>>>><<<><<<<><>>><>>><<<<><<<>>>><<>>>><<>><<>>><<<<>>><<>><>>><<>>>><<>><<<<><>><<>>>><<<><<<<><<<><><<>>><>><<<>>>><<<><<<<>>>><><<<<>><<<><>><>>><<>>><<<<>>>><<<<><<<<><<<><<><<<<>>>><>><<<<>><<>>><<<>>><><<<>>>><<<>>>><<<>><>><<>><<<>>>><<<<>>>><<<<>><><<<<>>>><><<>>>><<>><<<><<<>><><>>>><>><><<<<>>><<><>><<<>>>><><<><<><>>><<<<>>><>>><<<>>><<<<>><<>>>><>>>><>>>><<<<>>>><<<>>><>>><>>>><<>><<>>>><<<>>><<>>><<>>>><<<<>><<>>><>>><><<>>>><<><>>>><<>>><>><<<>><<>><><<<>>><<<>>>><><>>><<>>><<>>><<<<>>>><>>><<<<>>>><>><<<<>><<<<>>><<>><<>><>>><<<>><<<<>>><<>>>><<>><<<>>><><<>><<><<>><<<<>>>><<<<><>>>><><>>>><<<><><<<><<<<><<><>>>><><<<><<<<>>><>>>><<<<>><>>>><<>><<><><>><<<>>>><<>><<<>>>><<<<>>>><<<><<<>>><<<>><>><<<><<<>><<<<><<<>>><<<><>>><<>>><<<>>>><>><<>>>><<><<<>>><<<>>>><<<<>><<<>><<>><<<><>>><<>>><>>><<>><<>><<<<>>><>>><><<<<><<<<><<>>>><>>>><<>>>><<<<><<<<>><>><<<>>>><<<<>>><<>>>><<<<>>><<>>><<<<><<>>>><><><>>>><<>>>><<><<<>><<<>><<>>>><<>><<><<<<>>>><>><<<>><<<<><<<<>>><<>>><>>><<<<>>>><>><<<>>>><<<<>><>>>><<<>>>><>>><<<<>><<<<>>>><<<<>>><<<>>>><>><>>><<<><><<<>><<<<>>><>><<<>><>>>><<<>>>><<<>>><<<<>>><<<><<<>>><<>>>><<<>>><<<<>><<>>>><<<>><>>>><<>>>><<<<><<<><<>>>><><<<<>>>><<<<><<<<>>><<<>>>><<<<>>>><>><<<<>><<<<>>><><<<>><<<>>><>>>><<<>>><<><><<<<>>><<><<<>><<>>>><<<>><<<<>>><><<<>><<<>>>><<>>><<<>><<<<>>>><>>>><>>>><<<<><<<<>>><<><<>>>><<<<>><><>><<>><<<<>><<<>>>><>>>><<>><<>>><>>>><<<>>>><<<<>><<<>>>><<<<>><<>><<<<>>><<>><>>>><><<<<>>>><<>><<><<><<<>><>>>><<<>>>><<<>>><<<<><<<><>>><<>>><<>><<<>>><>><<<>>><<<>>>><>>><<>>>><<<>>><<><<>>><<>>>><>><<<><<><<<<>>><<<<>><>><<<>>><>><<<<>><<<<>><<>><<<<>>><<<<>>>><<<>>><<<<>>>><<><<>><<<><<<>>>><<<<><<<<>>><>>>><>><<<>>><<><><<>><<<>>>><<<><>>><<<>>><>>>><<><<<>><<<><<<<>><>>><<<>>>><>><<<><><<<>><<>><<<><<<>><<<<>>>><<<<>>><<>>><<<>>><<><<>><<<>>><<>>><<>><<<><>>><>>><<><<><><<>><>><<<><<<<>>><<<>>>><<<<>>>><>><<>>><>><>>>><<<>><<<<>>>><<<<>>><>>>><<<><<<<><<<><<<>>><<>>>><<<>><<<<>>>><<<<>>>><<<><<<<>><>>>><>><<>>>><<<<><<<>>><>>><<>>>><<<><<<<>>><<>><>><<>>><<<>>>><<<>>>><<<>>>><<<<>>><<<<>><><<<><<<>>>><<<>>>><<>><>>><<<><<<>><<<<><<><<><<<<>>><<>>>><<<<>>>><<>>><<<<>>>><<<<>>>><<<<><>><<<>><<><>>>><<<<><<>>>><<><<<>><<<<><<<<>><<>>>><<<>>><<>>>><>><<<<>><<<>><>>><<<<>>>><>>>><<<>><<<<><<>>>><<><>>>><><<>>><<<><<>><<<<><>>>><<<<><><>>>><<<<>>>><>>>><>><<<><>>><><<><<>>><<>>>><<<>>>><<><<<<><<<<><><<<<>>><<<>><<<><<<<>>><>>>><>>><<<><><>>>><>>>><<<>><<<>>>><<<<>>>><<<<><<<<>>>><<<><<><>><>>><>>>><<><<>>>><<<>>><<>>>><<<<>>><<<>>><<<>>><<<>><<>><<><<>>><<>>><<<>>><<<<>>>><>>>><<<>>>><>><>><><<>>><<<>><<<<>>><>><>><<<<>>><>><<>>><<<<>>><>>><>><<<>>>><<<<>>><<>>><>>>><>>>><<><<<<>>><<>><><<<<>><<<<>><<<<>>>><<<<>>>><<<<>>><<<>><<<>>>><<<<>>><>>><>>><>><<<>>><<><<>>><<>>><<<>>><<<<>>><<<>>>><<<>><<>>>><>><<<<>>>><<><<<<>>><<>><<>><>>>><<<>>>><<<>>>><>><<<<><>>><>><<>>><<<>>><<<>><<<>>>><<>>><<<>><<>>>><<<<>><<><<<<>>>><<>>><>>>><<<<><<<<><<><<<>><><<<>>><<<><<<><<<>>><<<<>><<<<>>><<<<>>>><>>><>>>><<<>>><<<<>><<<>>>><<<<>>><<<>><><<>>><<<>>><>>><<>>><<<>><<><<<>>><<>>><<>><<<<><<<>><<<<>>>><<<<>><>>><<<<>><<<><>>>><<>>>><>>><>><<>>>><<<>>>><<>>>><<<<>>><>>><>>><<<<>>>><>>>><>><<>><>><<<>><>><<>>><>>>><<<<>>><>>><<<><<<>>>><><<<>><>>><<<<><<<<><<<<><><<><<><<<><>>>><>><<>>><<<<>>><><<<<>><<<<><<<>>><<<>>>><<>><<<<><><<<>>>><>>><<<<><<<<>>>><>><><<<<>>>><<<<>>><>>><<<>><><<<><<<<>>>><<<<><<<>>><>><<<<>><<<>>>><<>>><<<><>><<>>>><<>>><>>><>>><<>>>><<<<>><>>>><>><<<<>>>><<>><<<>>>><<<<>>>><<>>>><<<>><<<<><<>>><><>>><>><<<<>>><<>><<<>>><<><<<>><<<<>><>>><<<><<>>><<>><<<>>>><<<>><<><<>>><<<><<<<><<<>>><<<><<><>>>><>>>><<<>>>><>><<<><<>>>><><<><<>>>><<<<>><<>>><<<<>>>><>>>><<>><<>><>>><<>><>>>><<<<>><>>><>>><<><>>>><<>><>>><<><><<<>>><>>>><<<>><<<<>>>><<<><<>>><<<<>>>><><<>>><<>><<<>>><<<>>>><>><<<<>>><<>>><>>>><>><<>>>><>>><>>><<>>><>><<<><<><<<<><>>>><<<>>>><>>>><<<<>>>><<<<><<<><<<>>><<<>><<>><<>>><<<>>><<<<>>>><<<>>><<<>>><<<><><<<>>>><>>>><>><<<>><<<>>>><><>>><<<>>>><>>>><<<>><<<<><>>><<<><<<<><<<>>>><<<<>>>><<<>>>><<><<>><>><<<>>><<<>><<<>>>><<<<>>><<<<>>><<<<><<<><<<><<<<>><<><<>>>><<<>>>><><<>><<>>><><<<<>>><<<><<<><<<>>>><<<>>><<<<>>>><<<<>><<<<>>>><><<>>><<><<>>><<><<<<><<<><><<<<><<>>>><>>><<<<>><<<<><<><<<<>>>><<<<>><<<>>>><>>><<<<>>><<<>>>><>>>><<<<>>><<<<>>>><>>><<<<>>><<<><><>>>><>>><<<<>>>><<<<><>><>>><><>><<>>><>>>><<<<><<<>>><<<<>>>><<<<>>>><<<>>><<<>>>><<<>>><<<<>><<><<>>><<<><<><<<<>>><<<<><<>><><<<><>>>><<<<>>>><<<<>>><<<>>><>>>><>><<<><<>>>><<<><<<<>>><<<><<<<>>><<<<>><><<>><<>>><>>><>>><<>>>><<>>>><<>>>><<<<><<<><<<<>>>><<>>>><><<<>><<<<>><<<>><<<>>><>><<>><<<<>>>><<<<>><><<>>>><<<>><<<<>>>><<<><<>>>><<<<>><<>>>><<<<>>>><>>>><>><>>><<<>><<<<>>>><<<>>><<<<><<<<><<><<>><<>><<<><<<<>><<<<><<>>>><<<<><>>>><>>>><>>><<>>>><<>>>><<<>>><<<><<>>>><<<><<<<>><<>>>><<><><<<<><<<><<>>>><<<>>><<<<>><<><<<>><>><<<<><><<<>>>><>><<>>>><<<>>>><<>>>><<<>><>><<>>><<<>>>><<<>>>><<<<>><<>>>><>><<<<>>>><<>><<<<>>><<>>><<><<<>>>><<<<>>><>><<>><<<<>><<<>><>><<>>>><<<>><<>>><<>><<<<>><><<<><<<<>>><<><<<><><<>>><<>><<<<>>><<<>><>><<<<>><<<<><<<<>>>><<<<>>><<>>><>>>><<<<>>><<<><<<<>><>>>><<<>>>><<><>>><<<>>><<<<>>>><<><<<>>>><<>>><<>><<<>><<<>>><<<><><><>><>>>><><>><<<>>>><<<>><<<>>>><<>><<>>><<<>>><<<>><<<<><<<<>>><>><<>><<<<>>>><<>>><<<<>><<<>>>><<<<>><<<<><>>><>>>><<>><<><<<>><<<><<<>><>>>><<<<>><<>>><<>>><<<>>>><>>>><<<<>>><<<><<<<>>><<>>><>><<>><<<>>>><<<<><>><>>><<<<>>>><>>>><<<><>>><<<><<<<>>><<<><<><<<<>><<>><<>>>><<<>>>><<<<>>>><<>><<<<><<<>>><><<<><<<>>><<<>>><><<<>>><<>>><<<<>><<<<>><<>>>><<><<<<>><<<><>>>><<<>>><<<>><<>>>><<<<><<<<>>>><<>>>><>>>><<<>>><<>>>><<<>>>><>>><<<<>>><>>>><>><><<<<>>>><<<>>><><<<><<<>>>><><<>>><<<<>>>><>><<><><<<>>><<<><<<<>>><<>><<<>>>><<<>>><<<<>><<<>><<<><<>>><<<<>>><><<>>><<<>>>><<<<>>>><<<<><<<>><>>>><>>>><<>>><<<>><<<>>>><<>><<>>>><<<><<>><><<><<><<><<<>>><>>>><>><><<<<>><>><>>>><>>><<<<>>>><<<<>>>><>>><<<>><<<<>>><<>>><<<<><<<<>>>><<<<>>>><<><<<>><<>>><<>>><<<>>>><<<<>>>><<<<>>><<>>><<><<<<><<>>>><<><<<<>><<<<>>><<<<>><<<>><<><>>><<>>>><<<<>>><<<<>>>><<<>>><>>><<<<>>>><<<<>>><<><>>><<><<<>><>>>><>>><<<<><<>><<>>>><>>><<<>>>><><<<<>>>><<<<>><<<>><<<><<<<>>><<<<>>><<>><<><<<<>>><><<>>>><<<>><<>><<<<>><<>><<>><<>>><<<<>><<<><<>>><><>>>><<<>>><<<><><<><<<<>>>><<<<>>>><><<<<><>>><<<>>><<<>><<>>>><<>><<<<>>><<><<<<>>>><<<>>>><<<>><<<>>>><>><<>><>><<<>><<><<><<<><<<<>>><>><<<<>><<<>>><<<<>>><<<<>><<<<>><<<<>>><<<<><>><<<><>>>><<>>>><<<<>><<<<>>><<>><>>><>>>><<<>>><>><<<>>><<><<<>>><<>><>>>><>><>><<><>>>><<<>>>><<>>>><<<>>>><<<>>><<<>>><<><<>>>><>>><>><<>>><<<>>><<>><<><<>><<>><<>>>><<>>>><>>><<<>>>><><<<<>><<<>>>><<<><<<<>>><<<<>>>><<>><<<><<<<>>>><><<>>>><>>><<<>>>><<<>>>><<><>><<<>>><<<<>>>><<<<><>>><<<<>><<<<>>><<<<><>>><<<<>><>>>><<<<>>><<>>>><<>>><<<<>>>><>>><><<>>>><<<><>><<<<>>>><<<<>>><<<>>>><<>><<<<>>>><>><<<><>><>>><>>><<>>><<<<>><<<>>>><<<>>><<<>>>><<<<>>><<<<>><<<<>>>><<<>>><>>>><<<>>><<<<><<<<><<>><<<<><<<<>><>><<<<>>>><<>><>>><<<><<>>><<<><<<<>><<<>>>><>>><>><<<>><<<<>>>><<<>>>><<>><>>>><<<<><<>>><<><<>>><>>><<>>><<<<>>><<<<>>><<<<>>><>>><>>>><<<><<<<>><<<>><<>>>><<<<>><<<><<<><>>>><<<>>>><<>>><<>>>><<<><<><<<><<<<>><>>>><<<<>><<><<>>>><<<<>><<<<>>><<<<>><>><<<<>>><>>>><<<<>>>><<>>>><<>>>><>>><<>><>>>><<<<>>><<<<>><>>><<>><<<<><<<>><><<<<>>>><<<<>><>>><<<<>><>>>><<><><<<<>><<<<>>><<<<><><<<>>><<><<<>><<<>>>><>>><>>>><<>>>><<>><<<>>>><>>>><<><<>>>><<><<<<>>>><>>>><<>>><<>>><><<<<>>><<<<>>><<<>><<>><>>>><<><>>><>>><<<<>><<<<>>>><<<>>>><<<<>>>><<<<>>>><<<>><>>>><<<>><<>><>>><>>><<><<<<>>>><<>><<<>>>><<<<><<<<>>>><<<><<<><<<<><<<>>><<<<>>>><<>>>><>><<<<><<>><<<<>>>><<<>>><>>>><<>>>><<<<>>><><>>>><<><>>>><<><<<<><<<><>>>><<><<<>>>><>><<<>>>><<<><>><>>>><<<>>><>>>><<>>>><>>>><<<<><>>>><<><<>><<<<><>>><<<<>>>><<<<><<<<><><<><<<>>><<<<>>>><<<<><<<>><<<<><>><>><<<>><<<<>><<>><<<><<<><<>>><<<<><<>><<<<>>><<>>>><<<<>><<>>>><<<<>>>><<<<>>><<<<><<<>>>><<>>>><<<<>><>>>><<<<><><<><>><<<<><>>>><<<>>><<<>><<<>><<<<>>><<<<>>>><>>>><><<<<>>>><>><>>>><<<>>><<<<><>>>><<>>><<<<><<<>><<<>>><<>>><<<<>>>><<<>>><<<>>>><<>><<>>><<><<<>>><<<<>>><<<>>><<<<>><><>>><<<>><<<<>><<>><><<<<>>><>>>><<<><<<<><<><<<>>><<<>><>>><<<<><<>><<<><<<>>><>><<<<>><>>>><<<>>>><<<><><<>>><>><<>><<<<>><>>>><><<<>>>><<<>><<>>>><<>>>><<>><<<<>><><>>>><<>>>><<<<><>><<><<<<>><<>>>><<<>>><<<>><<<<>><<>>>><>>>><<>>>><<<>>>><<<<><<><<<>>>><<>>>><<<>>><>>>><>><>>>><<<<>><>><><>><<><<<>><<><<<>>><<<<><<<<><<<<>>><<>>>><<<>>><<><>>>><<>>>><<>>><<>>>><<><<<<>><>>>><<<>><<<>>><<<>>>><<>><>>><>><<<>><<<>><<>>><<<><<>><<<<><<<>>>><>>><<<><<<>>>><<<>><>><>>>><>><><<>><<<<>>><<<>><<>><<<>>>><<<<>><<<>><>>>><<<<>>>><>><>><<<<>><<<>>>><<>>><<<<><>>>><<<>>>><<<<><<>>>><<><>><<>>><<<<>><<<<>>><<<<>>>><>>>><<>><<<<>>>><<>>>><<>>><<>>>><<<><<<>>><<>>><<<>><<<>>><<><<<><<<<>>>><<<><<><>>>><<>>><<>>><><<>>><<<<><<<<>>><>><<>>>><<<<>>><<<<><>>>><<<<>>>><>>>><<<>>>><<<<>>>><<<<>>><<<<>><>>><>><<><<<<>>>><>>>><>>>><<<>><>><<<><><<><<<<>><<>>><<<>><<<><<<<><<<>><<<<>><<<<><<>><<<>>><<<<><<>>><>><>>>><<>>>><<<<>>><><<<<>>><>><<<<><<<<>><<<>>><<<<><<><<><<>><<><<>>><>><<<<>>><<<>><<<<>><<<<><<<>>>><>>><><<<>><<><<>><<>>>><<>>><<>>>><<<<>>>><>>>><>>><<>>><<>>>><>>><<><<<<>>><<<>><<<<>><<<>>><<<<>>><<<><<>>>><<<>>>><<<<>><<><>>><<<><<<<>>>><><<>>>><<<>>>><><<>>>><<>>>><<<<>><<<<><<<><<>><>><>><>>><<><>>><<><<>><<<<><<>><<<<>><>><<<<>>><<<<>><<<<>>><<<><>>>><<<>>>><>>>><><>>>><<>><<<<>><>><<<>>>><<>>>><<>>><<<>>>><><>>>><<<>>>><<<<>><<<>><<>>><<><<<>><<<<>>>><<>>>><>>>><<><<>>>><>>>><<<<>><<<<><<>>><><<><<<>>>><><<>><<<>>><>>>><<>>>><><<><<>>><>><>><<<<><<>>>><<<<>><<<<>>><>>>><<<>>><<<<><>>>><<<<>>>><<>>><<>>><<<>><>><<<<><<<<>>>><><<<>><<<<>>>><<><<<>><<<>><<<<>>>><><<><>>>><><<<<>>><<<>>><<>>>><>>>><<<<>><<><<>>>><<<><<<><>>><>>><<>><<<>><><<<<>>><<<<><>>>><<<>><<>><<>><<<>><<<<>>>><<<>><>>>><<>><>><>>><<<>><>><<<<><<<<>>>><<<<>>><<<>>>><<<<>>><<<<>>><<<<>>><<><>>>><<>>>><>>><<>>>><<<>>><<>>><>><<<>>>><>><<>>><<><<>>><<<>>>><<><<><><<<>>><<<>>>><<<>><<<<>><<><<<<>>><>>>><<<<><<>>><<<>>>><<><<<>>><><<>>><<<<><<<>>><>><><<<>>><<<>>>';
const exampleinput = '>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>';

const jet_pattern = input.split('');
console.log(jet_pattern);
// rock formations
const UNDERSCORE = ['@@@@'.split('')];
const PLUS = `.@.
@@@
.@.`.split(/\n/).map(l => l.split(''));
const JAY = `..@
..@
@@@`.split(/\n/).map(l => l.split(''));
const EL = `@
@
@
@`.split(/\n/).map(l => l.split(''));
const OH = `@@
@@`.split(/\n/).map(l => l.split(''));

console.log('_', UNDERSCORE);
console.log('+', PLUS);
console.log('J', JAY);
console.log('l', EL);
console.log('o', OH);
const SHAPES = [UNDERSCORE, PLUS, JAY, EL, OH];
const DIR_LEFT = '<';
const DIR_RIGHT = '>';
const DIR_DOWN = 'v';
const DEBUG = false;

function* jet_generator(source) {
  let i = 0;
  while (true) {
    yield source[i];
    i = (i+1) % source.length;
  }
}
const gen_jet = jet_generator(jet_pattern);

function* shape_generator(source) {
  let i = 0;
  while (true) {
    yield source[i];
    i = (i+1) % source.length;
  }
}
const gen_shape = shape_generator(SHAPES);
let shape_pos = [-1,-1];
let cur_shape = null;

const NUM_COLS = 7;

const display_grid = (grid) => {
  let string = [];
  for (let i = grid.length - 1; i >= 0; i--) {
    string.push(grid[i].join(''));
  }
  console.log('height: ', grid.length, "\n" + string.join("\n"));
  console.log("\n");
}

const increase_grid_height = (grid, n) => {
  for (let i = 0; i < n; i++) {
    grid.push(new Array(NUM_COLS).fill('.'));
  }
}

const draw_shape = (grid, shape, pos, settle = false) => {
  for (let i = pos[0] + 1 - shape.length, si = shape.length - 1; i < grid.length && si >= 0; i++, si--) {
    for (let j = pos[1], sj = 0; j < grid[i].length && sj < shape[si].length; j++, sj++) {
      grid[i][j] = settle ? (shape[si][sj] == '@' ? '#' : shape[si][sj]) : shape[si][sj];
    }
  }
}

const get_grid_topmost = (grid) => {
  for (let i = grid.length - 1; i >=0; i--) {
    if (grid[i].findIndex((v) => v == '#') != -1) {
      return i;
    }
  }
  return -1;
}

/**
 * @returns [string[], number[]] Returns shape and shape position
 */
const add_shape_to_grid = (grid, shape) => {
  DEBUG && console.log('shape: ', shape, shape.length);
  // determine topmost of grid, start from top then move down searching for #
  let index_top = get_grid_topmost(grid);  
  DEBUG && console.log('index_top:' , index_top);
  // additional height is shape height + topmost filled position of grid + 3 vertical space
  let required_height = shape.length + index_top + 3 + 1;
  let additional_height = Math.abs(grid.length - (shape.length + index_top + 3 + 1));
  DEBUG && console.log('computed additional_height: ', required_height, grid.length, additional_height, shape.length, index_top);
  if (grid.length < required_height) {
    increase_grid_height(grid, additional_height);
  }
  // shape initial position
  let pos = [index_top + 3 + shape.length, 2];
  draw_shape(grid, shape, pos);
  return [shape, pos];
}

const clear_shape = (grid, shape, pos) => {
  for (let i = pos[0] - shape.length + 1, n = i + shape.length, si = shape.length - 1; i <= n && si >= 0; i++, si--) {
    for (let j = pos[1], m = j + shape[si].length; j < m; j++) {
      grid[i][j] = '.';
    }
  }
}

const apply_movement = (grid, dir) => {
  DEBUG && console.log('apply_movement dir', dir);
  // clear shape from previous position
  clear_shape(grid, cur_shape, shape_pos);
  let settle = false;
  if (dir == DIR_LEFT) {
    DEBUG && console.log('BEFORE shape_pos', shape_pos);
    // attempt move shape left
    shape_pos[1]--;
    DEBUG && console.log('AFTER shape_pos', shape_pos);
    // check boundary collision
    let stop = shape_pos[1] < 0;
    if (!stop) {
      // take leftmost slice of shape
      let shape_left = cur_shape.map(v => v[0]);
      // check against settled shapes
      for (let i = shape_pos[0], si = 0; i >= 0 && si < cur_shape.length; i--, si++) {
        DEBUG && console.log(grid[i][shape_pos[1]], shape_left[si]);
        // check leftmost slice of shape against where it will end up in the grid
        if (shape_left[si] == '@' && grid[i][shape_pos[1]] == '#') {
          DEBUG && console.log('collision detected');
          // move shape back
          shape_pos[1]++;
          break;
        }
      }
    }
    else {
      // move shape back
      shape_pos[1]++;
      DEBUG && console.log('Reached leftmost edge');
    }
  }
  else if (dir == DIR_RIGHT) {
    // attempt move shape right
    shape_pos[1]++;
    // check boundary collision
    let stop = shape_pos[1]+cur_shape[0].length-1 > grid[0].length-1;
    DEBUG && console.log(shape_pos[1]+cur_shape[0].length-1, '>', grid[0].length - 1);
    DEBUG && console.log('stop', stop);
    if (!stop) {
      // take rightmost slice of shape
      let shape_right = cur_shape.map(v => v[v.length-1]);
      DEBUG && console.log('shape_right', shape_right);
      // check against settled shapes
      for (let i = shape_pos[0], si = 0; i >= 0 && si < cur_shape.length; i--, si++) {
        DEBUG && console.log(shape_right[si], grid[i][shape_pos[1]+cur_shape[0].length-1]);
        // compare rightmost slice of shape against where it will end up in the grid
        if (shape_right[si] == '@' && grid[i][shape_pos[1]+cur_shape[0].length-1] == '#') {
          DEBUG && console.log('collision detected');
          // move shape back
          shape_pos[1]--;
          break;
        }
      }
    }
    else {
      // move shape back
      shape_pos[1]--;
      DEBUG && console.log('Reached rightmost edge');
    }
  }
  else if (dir == DIR_DOWN) {
    shape_pos[0]--;
    let bottom = shape_pos[0]-cur_shape.length+1;
    DEBUG && console.log('bottom: ', bottom);
    // if bottom of shape has '#' or it is bottom then we settle;
    settle = bottom < 0;
    if (!settle) {
      let dest = grid[bottom].slice(shape_pos[1]);
      let shape_bottom = cur_shape[cur_shape.length-1];
      DEBUG && console.log('checking ', dest.join(''));
      DEBUG && console.log('against  ', shape_bottom.join(''));
      for (let i = 0; i < dest.length; i++) {
        if (shape_bottom[i] == '@' && dest[i] == '#') {
          settle = true;
          break;
        }
      }
    }
    if (settle) {
      // move back
      shape_pos[0]++;
      DEBUG && console.log('Reached bottom');
    }
  }
  draw_shape(grid, cur_shape, shape_pos, settle);
  return settle;
}

const GRID = new Array(0).fill();

let num_rocks = 0;
DEBUG && display_grid(GRID);
do {
  [cur_shape, shape_pos] = add_shape_to_grid(GRID, gen_shape.next().value);
  DEBUG && display_grid(GRID);
  num_rocks++;
  let settled = false;
  do {
    apply_movement(GRID, gen_jet.next().value);
    DEBUG && display_grid(GRID);
    settled = apply_movement(GRID, DIR_DOWN);
    DEBUG && display_grid(GRID);
  } while (!settled);
} while (num_rocks < 2022);

let topmost = get_grid_topmost(GRID) + 1;
console.log(topmost);